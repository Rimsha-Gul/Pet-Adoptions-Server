components:
    examples: {}
    headers: {}
    parameters: {}
    requestBodies: {}
    responses: {}
    schemas:
        SignupResponse:
            properties:
                name:
                    type: string
                email:
                    type: string
            required:
                - name
                - email
            type: object
            additionalProperties: false
        Role:
            enum:
                - ADMIN
                - SHELTER
                - USER
            type: string
        UserPayload:
            properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                role:
                    $ref: '#/components/schemas/Role'
            required:
                - name
                - email
                - password
                - role
            type: object
            additionalProperties: false
            example:
                name: 'Jack Doe'
                email: johndoe@example.com
                password: '123456'
                role: USER
        EmailChangeRequest:
            enum:
                - currentEmailStep
                - newEmailStep
            type: string
        SendCodePayload:
            properties:
                email:
                    type: string
                    description: 'Email of user'
                    example: johndoe@example.com
                emailChangeRequest:
                    $ref: '#/components/schemas/EmailChangeRequest'
            required:
                - email
            type: object
            additionalProperties: false
        VerificationResponse:
            properties:
                tokens:
                    properties:
                        refreshToken:
                            type: string
                        accessToken:
                            type: string
                    required:
                        - refreshToken
                        - accessToken
                    type: object
                isVerified:
                    type: boolean
            required:
                - tokens
                - isVerified
            type: object
            additionalProperties: false
        VerificationPayload:
            properties:
                email:
                    type: string
                    description: 'Email of user'
                    example: johndoe@example.com
                verificationCode:
                    type: string
                    description: 'Verification code of user'
                    example: '654321'
            required:
                - email
                - verificationCode
            type: object
            additionalProperties: false
        TokenResponse:
            properties:
                tokens:
                    properties:
                        refreshToken:
                            type: string
                        accessToken:
                            type: string
                    required:
                        - refreshToken
                        - accessToken
                    type: object
            required:
                - tokens
            type: object
            additionalProperties: false
        LoginPayload:
            properties:
                email:
                    type: string
                    description: 'Email of user'
                    example: johndoe@example.com
                password:
                    type: string
                    description: 'Password for user'
                    example: '123456'
            required:
                - email
                - password
            type: object
            additionalProperties: false
        EmailPayload:
            properties:
                email:
                    type: string
                    description: 'Email of user'
                    example: johndoe@example.com
            required:
                - email
            type: object
            additionalProperties: false
        PasswordPayload:
            properties:
                password:
                    type: string
                    description: 'Password for user'
                    example: '123456'
            required:
                - password
            type: object
            additionalProperties: false
        ResetPasswordPayload:
            properties:
                email:
                    type: string
                    description: 'Email of user'
                    example: johndoe@example.com
                newPassword:
                    type: string
                    description: 'Password for user'
                    example: '123456'
            required:
                - email
                - newPassword
            type: object
            additionalProperties: false
        SessionResponse:
            properties:
                name:
                    type: string
                email:
                    type: string
                role:
                    $ref: '#/components/schemas/Role'
                address:
                    type: string
                bio:
                    type: string
                profilePhoto:
                    type: string
            required:
                - name
                - email
                - role
                - address
                - bio
                - profilePhoto
            type: object
            additionalProperties: false
        Gender:
            enum:
                - Male
                - Female
            type: string
        Category:
            enum:
                - Cat
                - Dog
                - Horse
                - Rabbit
                - Bird
                - 'Small and Furry'
                - 'Scales, Fins and Others'
                - Barnyard
            type: string
        ActivityNeeds:
            enum:
                - Low
                - 'Very Low'
                - Midrange
                - High
                - 'Very High'
            type: string
        LevelOfGrooming:
            enum:
                - Low
                - Medium
                - High
            type: string
        PetsResponse:
            properties:
                shelterName:
                    type: string
                microchipID:
                    type: string
                name:
                    type: string
                gender:
                    $ref: '#/components/schemas/Gender'
                birthDate:
                    type: string
                color:
                    type: string
                breed:
                    type: string
                category:
                    $ref: '#/components/schemas/Category'
                activityNeeds:
                    $ref: '#/components/schemas/ActivityNeeds'
                levelOfGrooming:
                    $ref: '#/components/schemas/LevelOfGrooming'
                isHouseTrained:
                    type: boolean
                healthInfo:
                    properties:
                        deSexed:
                            type: boolean
                        vaccinated:
                            type: boolean
                        heartwormTreated:
                            type: boolean
                        wormed:
                            type: boolean
                        allergiesTreated:
                            type: boolean
                        healthCheck:
                            type: boolean
                    required:
                        - deSexed
                        - vaccinated
                        - heartwormTreated
                        - wormed
                        - allergiesTreated
                        - healthCheck
                    type: object
                bio:
                    type: string
                traits:
                    items:
                        type: string
                    type: array
                adoptionFee:
                    type: string
                images:
                    items:
                        type: string
                    type: array
                hasAdoptionRequest:
                    type: boolean
                applicationID:
                    type: string
                isAdopted:
                    type: boolean
                shelterRating:
                    type: number
                    format: double
            required:
                - shelterName
                - microchipID
                - name
                - gender
                - birthDate
                - color
                - breed
                - category
                - activityNeeds
                - levelOfGrooming
                - isHouseTrained
                - healthInfo
                - bio
                - traits
                - adoptionFee
                - images
                - hasAdoptionRequest
                - isAdopted
            type: object
            additionalProperties: false
        AddPetResponse:
            properties:
                pet:
                    $ref: '#/components/schemas/PetsResponse'
            required:
                - pet
            type: object
            additionalProperties: false
        AllPetsResponse:
            properties:
                pets:
                    items:
                        $ref: '#/components/schemas/PetsResponse'
                    type: array
                totalPages:
                    type: number
                    format: double
                colors:
                    items:
                        type: string
                    type: array
                breeds:
                    items:
                        type: string
                    type: array
                genders:
                    items:
                        type: string
                    type: array
                ages:
                    items:
                        type: number
                        format: double
                    type: array
            required:
                - pets
                - totalPages
                - colors
                - breeds
                - genders
                - ages
            type: object
            additionalProperties: false
        Status:
            enum:
                - 'Under Review'
                - 'Home Visit Requested'
                - 'Home Visit Scheduled'
                - 'Home Approved'
                - 'Home Rejected'
                - 'User Visit Scheduled'
                - Approved
                - Rejected
                - Closed
                - Expired
                - 'Reactivation Requested'
                - 'Reactivation Request Approved'
                - 'Reactivation Request Declined'
            type: string
        ResidenceType:
            enum:
                - ownHouse
                - rentHouse
            type: string
        ApplicationResponse:
            properties:
                shelterID:
                    type: string
                microchipID:
                    type: string
                residenceType:
                    $ref: '#/components/schemas/ResidenceType'
                hasRentPetPermission:
                    type: boolean
                hasChildren:
                    type: boolean
                childrenAges:
                    type: string
                hasOtherPets:
                    type: boolean
                otherPetsInfo:
                    type: string
                petAloneTime:
                    type: number
                    format: double
                hasPlayTimeParks:
                    type: boolean
                petActivities:
                    type: string
                handlePetIssues:
                    type: string
                moveWithPet:
                    type: string
                canAffordPetsNeeds:
                    type: boolean
                canAffordPetsMedical:
                    type: boolean
                petTravelPlans:
                    type: string
                petOutlivePlans:
                    type: string
                id:
                    type: string
                status:
                    $ref: '#/components/schemas/Status'
                submissionDate:
                    type: string
                petImage:
                    type: string
                petName:
                    type: string
                shelterName:
                    type: string
                applicantName:
                    type: string
                homeVisitDate:
                    type: string
                shelterVisitDate:
                    type: string
                homeVisitEmailSentDate:
                    type: string
                shelterVisitEmailSentDate:
                    type: string
            required:
                - shelterID
                - microchipID
                - residenceType
                - hasRentPetPermission
                - hasChildren
                - childrenAges
                - hasOtherPets
                - otherPetsInfo
                - petAloneTime
                - hasPlayTimeParks
                - petActivities
                - handlePetIssues
                - moveWithPet
                - canAffordPetsNeeds
                - canAffordPetsMedical
                - petTravelPlans
                - petOutlivePlans
                - id
                - status
                - submissionDate
                - petImage
                - petName
                - shelterName
            type: object
            additionalProperties: false
        ApplictionResponseForUser:
            properties:
                application:
                    $ref: '#/components/schemas/ApplicationResponse'
                canReview:
                    type: boolean
            required:
                - application
            type: object
            additionalProperties: false
        ApplicationPayload:
            properties:
                shelterID:
                    type: string
                microchipID:
                    type: string
                residenceType:
                    $ref: '#/components/schemas/ResidenceType'
                hasRentPetPermission:
                    type: boolean
                hasChildren:
                    type: boolean
                childrenAges:
                    type: string
                hasOtherPets:
                    type: boolean
                otherPetsInfo:
                    type: string
                petAloneTime:
                    type: number
                    format: double
                hasPlayTimeParks:
                    type: boolean
                petActivities:
                    type: string
                handlePetIssues:
                    type: string
                moveWithPet:
                    type: string
                canAffordPetsNeeds:
                    type: boolean
                canAffordPetsMedical:
                    type: boolean
                petTravelPlans:
                    type: string
                petOutlivePlans:
                    type: string
            required:
                - shelterID
                - microchipID
                - residenceType
                - hasRentPetPermission
                - hasChildren
                - childrenAges
                - hasOtherPets
                - otherPetsInfo
                - petAloneTime
                - hasPlayTimeParks
                - petActivities
                - handlePetIssues
                - moveWithPet
                - canAffordPetsNeeds
                - canAffordPetsMedical
                - petTravelPlans
                - petOutlivePlans
            type: object
            additionalProperties: false
            example:
                shelterID: 6475e9630044288a2b4880b5
                microchipID: A123456789
                residenceType: rentHouse
                hasRentPetPermission: 'true'
                hasChildren: 'true'
                childrenAges: '2,4'
                hasOtherPets: 'true'
                otherPetsInfo: 'Cat 1, Dog 2'
                petAloneTime: '4'
                hasPlayTimeParks: 'true'
                petActivities: 'walking, playing around the house, swimming, sky diving'
                handlePetIssues: 'i will pat him'
                moveWithPet: 'i will take him with me'
                canAffordPetsNeeds: 'true'
                canAffordPetsMedical: 'true'
                petTravelPlans: 'i will take him wherever i go'
                petOutlivePlans: 'My friend, Alex will take care of him'
        AllApplicationsResponse:
            properties:
                applications:
                    items:
                        $ref: '#/components/schemas/ApplicationResponse'
                    type: array
                totalPages:
                    type: number
                    format: double
                applicationStatuses:
                    items:
                        type: string
                    type: array
            required:
                - applications
                - totalPages
                - applicationStatuses
            type: object
            additionalProperties: false
        TimeSlotsResponse:
            properties:
                availableTimeSlots:
                    items:
                        type: string
                    type: array
            required:
                - availableTimeSlots
            type: object
            additionalProperties: false
        ScheduleVisitPayload:
            properties:
                visitDate:
                    type: string
                    description: 'Date for visit'
                    example: '2023-08-19T04:00:00Z'
            required:
                - visitDate
            type: object
            additionalProperties: false
        UpdateApplicationPayload:
            properties:
                status:
                    $ref: '#/components/schemas/Status'
            required:
                - status
            type: object
            additionalProperties: false
        ShelterProfileResponse:
            properties:
                profilePhoto:
                    type: string
                name:
                    type: string
                email:
                    type: string
                address:
                    type: string
                bio:
                    type: string
                rating:
                    type: number
                    format: double
                numberOfReviews:
                    type: number
                    format: double
                canReview:
                    type: boolean
            required:
                - profilePhoto
                - name
                - email
                - address
                - bio
                - rating
                - numberOfReviews
                - canReview
            type: object
            additionalProperties: false
        ShelterResponse:
            properties:
                id:
                    type: string
                name:
                    type: string
            required:
                - id
                - name
            type: object
            additionalProperties: false
        ApplictionResponseShelter:
            properties:
                shelterID:
                    type: string
                microchipID:
                    type: string
                residenceType:
                    $ref: '#/components/schemas/ResidenceType'
                hasRentPetPermission:
                    type: boolean
                hasChildren:
                    type: boolean
                childrenAges:
                    type: string
                hasOtherPets:
                    type: boolean
                otherPetsInfo:
                    type: string
                petAloneTime:
                    type: number
                    format: double
                hasPlayTimeParks:
                    type: boolean
                petActivities:
                    type: string
                handlePetIssues:
                    type: string
                moveWithPet:
                    type: string
                canAffordPetsNeeds:
                    type: boolean
                canAffordPetsMedical:
                    type: boolean
                petTravelPlans:
                    type: string
                petOutlivePlans:
                    type: string
                id:
                    type: string
                status:
                    $ref: '#/components/schemas/Status'
                applicantEmail:
                    type: string
                applicantName:
                    type: string
                submissionDate:
                    type: string
                    format: date-time
                petImage:
                    type: string
                petName:
                    type: string
            required:
                - shelterID
                - microchipID
                - residenceType
                - hasRentPetPermission
                - hasChildren
                - childrenAges
                - hasOtherPets
                - otherPetsInfo
                - petAloneTime
                - hasPlayTimeParks
                - petActivities
                - handlePetIssues
                - moveWithPet
                - canAffordPetsNeeds
                - canAffordPetsMedical
                - petTravelPlans
                - petOutlivePlans
                - id
                - status
                - applicantEmail
                - applicantName
                - submissionDate
                - petImage
                - petName
            type: object
            additionalProperties: false
        ApplictionResponseForShelter:
            properties:
                application:
                    $ref: '#/components/schemas/ApplictionResponseShelter'
            required:
                - application
            type: object
            additionalProperties: false
        VerifyInvitationResponse:
            properties:
                email:
                    type: string
                role:
                    $ref: '#/components/schemas/Role'
            required:
                - email
                - role
            type: object
            additionalProperties: false
        ReviewPayload:
            properties:
                rating:
                    type: number
                    format: double
                    description: 'User''s given rating of shelter'
                    example: '5'
                reviewText:
                    type: string
                    description: 'User''s given review text of shelter'
                    example: 'Animal Haven Shelter provided an incredibly positive adoption experience. Highly recommended for anyone looking to adopt a pet.'
            required:
                - rating
                - reviewText
            type: object
            additionalProperties: false
        ReviewResponse:
            properties:
                applicantName:
                    type: string
                applicantEmail:
                    type: string
                rating:
                    type: number
                    format: double
                reviewText:
                    type: string
            required:
                - applicantName
                - applicantEmail
                - rating
                - reviewText
            type: object
            additionalProperties: false
        ReviewsResponse:
            properties:
                reviews:
                    items:
                        $ref: '#/components/schemas/ReviewResponse'
                    type: array
                totalPages:
                    type: number
                    format: double
            required:
                - reviews
                - totalPages
            type: object
            additionalProperties: false
        ReactivationRequestPayload:
            properties:
                reasonNotScheduled:
                    type: string
                    description: 'Reason for not scheduling visit'
                    example: 'I had an unexpected personal commitment that consumed my attention during that time, and I missed the scheduling window.'
                reasonToReactivate:
                    type: string
                    description: 'Reason for requesting to reactivate'
                    example: 'The commitment has been addressed, and I am now fully available to proceed with the visit scheduling.'
            required:
                - reasonNotScheduled
                - reasonToReactivate
            type: object
            additionalProperties: false
        NotificationResponse:
            properties:
                id:
                    type: string
                userEmail:
                    type: string
                applicationID:
                    type: string
                status:
                    $ref: '#/components/schemas/Status'
                petImage:
                    type: string
                isSeen:
                    type: boolean
                isRead:
                    type: boolean
                actionUrl:
                    type: string
                date:
                    type: string
            required:
                - id
                - userEmail
                - applicationID
                - status
                - petImage
                - isSeen
                - isRead
                - actionUrl
                - date
            type: object
            additionalProperties: false
        AllNotificationsResponse:
            properties:
                notifications:
                    items:
                        $ref: '#/components/schemas/NotificationResponse'
                    type: array
                totalPages:
                    type: number
                    format: double
            required:
                - notifications
                - totalPages
            type: object
            additionalProperties: false
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
info:
    title: express-ts
    version: 1.0.0
    license:
        name: ISC
    contact: {}
openapi: 3.0.0
paths:
    /auth/signup:
        post:
            operationId: Signup
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SignupResponse'
                            examples:
                                'Example 1':
                                    value: {name: 'John Doe', email: johndoe@example.com}
            summary: 'Accepts user info, creates user and returns user info except password'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserPayload'
    /auth/verificationCode:
        post:
            operationId: SendVerificationCode
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Generates a 6-digit code and sends it'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SendCodePayload'
    /auth/email/verification:
        post:
            operationId: VerifyEmail
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationResponse'
                            examples:
                                'Example 1':
                                    value: {isVerified: true, tokens: {accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..., refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}
            summary: 'Accepts a 6-digit code from user, verifies the code in db'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VerificationPayload'
    /auth/login:
        post:
            operationId: Login
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TokenResponse'
                            examples:
                                'Example 1':
                                    value: {tokens: {accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..., refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}
            summary: 'Verifies the user''s email and password and returns JWT tokens'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginPayload'
    /auth/token/refresh:
        post:
            operationId: Refresh
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TokenResponse'
                            examples:
                                'Example 1':
                                    value: {tokens: {accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..., refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}
            summary: 'Refreshes access token'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
    /auth/profile:
        put:
            operationId: UpdateProfile
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
                            examples:
                                'Example 1':
                                    value: {name: 'John Doe', address: '123 Main St', bio: 'Pet lover with years of experience fostering cats and dogs. I have a spacious home with a large, secure backyard. I love active pets and have a preference for medium to large dogs.', profilePhoto: 'https://example.com/userProfilePhoto.jpg', removeProfilePhoto: true}
            summary: 'Updates user''s profile'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: false
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                address:
                                    type: string
                                bio:
                                    type: string
                                profilePhoto:
                                    type: string
                                    format: binary
    /auth/email/availability:
        get:
            operationId: CheckEmail
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Checks if user''s new email already has a linked account'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'New email for user'
                    in: query
                    name: email
                    required: true
                    schema:
                        type: string
    /auth/email:
        put:
            operationId: ChangeEmail
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TokenResponse'
                            examples:
                                'Example 1':
                                    value: {tokens: {accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..., refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}
            summary: 'Changes user''s email'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailPayload'
    /auth/password/verify:
        post:
            operationId: VerifyPassword
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Checks if user''s entered password is correct'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PasswordPayload'
    /auth/password:
        put:
            operationId: ChangePassword
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Changes user''s password'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PasswordPayload'
    /auth/logout:
        delete:
            operationId: Logout
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Removes JWT tokens and returns success message'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
    /auth/password/reset/request:
        post:
            operationId: RequestPasswordReset
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Checks if user''s entered email has an associated account and create reset tokens'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailPayload'
    /auth/password/reset/token/verify:
        get:
            operationId: VerifyResetToken
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    email: {}
                                required:
                                    - email
                                type: object
            summary: 'Verifies the reset password token for user'
            tags:
                - Auth
            security: []
            parameters:
                -
                    in: query
                    name: resetToken
                    required: true
                    schema:
                        type: string
    /auth/password/reset:
        put:
            operationId: ResetPassword
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Changes user''s password'
            tags:
                - Auth
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ResetPasswordPayload'
    /auth/email/alternate:
        post:
            operationId: GetAlternateEmail
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Sends email to user to provide alternate email to sign up as shelter'
            tags:
                - Auth
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailPayload'
    /session:
        get:
            operationId: Session
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SessionResponse'
                            examples:
                                'Example 1':
                                    value: {name: 'John Doe', email: johndoe@example.com, role: USER, address: '123 Main St', bio: 'Pet lover with years of experience fostering cats and dogs. I have a spacious home with a large, secure backyard. I love active pets and have a preference for medium to large dogs.', profilePhoto: 'https://example.com/userProfilePhoto.jpg'}
            summary: 'Get a user''s session info'
            tags:
                - Session
            security:
                -
                    bearerAuth: []
            parameters: []
    /pet:
        post:
            operationId: AddPet
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AddPetResponse'
                            examples:
                                'Example 1':
                                    value: {pet: {shelterName: 'Purrfect Adoption Center', microchipID: A123456789, name: Snowball, gender: Male, birthDate: '2001-01-01', color: white, breed: 'Mini Lop', category: Cat, activityNeeds: Low, levelOfGrooming: High, isHouseTrained: true, healthInfo: {healthCheck: true, allergiesTreated: true, wormed: true, heartwormTreated: true, vaccinated: true, deSexed: true}, bio: 'Meredith is a playful and friendly cat. She loves chasing laser pointers and enjoys cuddling on the couch.', traits: [Affectionate, independent], adoptionFee: '300 USD', images: ['https://example.com/images/fluffy1.jpg', 'https://example.com/images/fluffy2.jpg'], hasAdoptionRequest: false, isAdopted: false, shelterRating: 4.8}}
            summary: 'Accepts pet info, adds pet to db and returns pet info'
            tags:
                - Pet
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                microchipID:
                                    type: string
                                name:
                                    type: string
                                gender:
                                    type: string
                                birthDate:
                                    type: string
                                color:
                                    type: string
                                breed:
                                    type: string
                                category:
                                    type: string
                                activityNeeds:
                                    type: string
                                levelOfGrooming:
                                    type: string
                                isHouseTrained:
                                    type: string
                                healthCheck:
                                    type: string
                                allergiesTreated:
                                    type: string
                                wormed:
                                    type: string
                                heartwormTreated:
                                    type: string
                                vaccinated:
                                    type: string
                                deSexed:
                                    type: string
                                bio:
                                    type: string
                                traits:
                                    type: string
                                adoptionFee:
                                    type: string
                                images:
                                    items: {type: string, format: binary}
                                    type: array
                                shelterID:
                                    type: string
                            required:
                                - microchipID
                                - name
                                - gender
                                - birthDate
                                - color
                                - breed
                                - category
                                - activityNeeds
                                - levelOfGrooming
                                - isHouseTrained
                                - healthCheck
                                - allergiesTreated
                                - wormed
                                - heartwormTreated
                                - vaccinated
                                - deSexed
                                - bio
                                - traits
                                - adoptionFee
                                - images
        get:
            operationId: GetAllPets
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AllPetsResponse'
                            examples:
                                'Example 1':
                                    value: {pets: [{shelterName: 'Purrfect Adoption Center', microchipID: A123456789, name: Fluffy, gender: Female, birthDate: '2001-01-01', color: White, breed: Persian, category: Cat, activityNeeds: Low, levelOfGrooming: High, isHouseTrained: true, healthInfo: {healthCheck: true, allergiesTreated: true, wormed: true, heartwormTreated: true, vaccinated: true, deSexed: true}, bio: 'Fluffy is a calm and friendly cat...', traits: [Affectionate, independent], adoptionFee: '100 USD', images: ['https://example.com/images/fluffy1.jpg', 'https://example.com/images/fluffy2.jpg'], hasAdoptionRequest: false, isAdopted: true}, {shelterName: 'Furry Adoption Center', microchipID: B123456789, name: Buddy, gender: Male, birthDate: '2001-01-01', color: Brown, breed: 'Labrador Retriever', category: Dog, activityNeeds: High, levelOfGrooming: Medium, isHouseTrained: true, healthInfo: {healthCheck: true, allergiesTreated: true, wormed: true, heartwormTreated: true, vaccinated: true, deSexed: true}, bio: 'Buddy is a playful and energetic dog...', traits: [Friendly, loyal], adoptionFee: '150 USD', images: ['https://example.com/images/buddy1.jpg', 'https://example.com/images/buddy2.jpg'], hasAdoptionRequest: false, isAdopted: false}], totalPages: 5, colors: [White, Black, Brown], breeds: [Persian, 'Labrador Retriever', 'Golden Retriever'], genders: [Male, Female], ages: [1, 2, 3, 4, 5]}
            summary: 'Returns all pets'
            tags:
                - Pet
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: query
                    name: page
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: limit
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: searchQuery
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: filterOption
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: colorFilter
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: breedFilter
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: genderFilter
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: ageFilter
                    required: false
                    schema:
                        type: string
    '/pet/{petID}':
        get:
            operationId: GetPetDetails
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AddPetResponse'
                            examples:
                                'Example 1':
                                    value: {pet: {shelterName: 'Purrfect Adoption Center', microchipID: A123456789, name: Snowball, gender: Male, birthDate: '2001-01-01', color: white, breed: 'Mini Lop', category: Cat, activityNeeds: Low, levelOfGrooming: High, isHouseTrained: true, healthInfo: {healthCheck: true, allergiesTreated: true, wormed: true, heartwormTreated: true, vaccinated: true, deSexed: true}, bio: 'Meredith is a playful and friendly cat. She loves chasing laser pointers and enjoys cuddling on the couch.', traits: [Affectionate, independent], adoptionFee: '300 USD', images: ['https://example.com/images/fluffy1.jpg', 'https://example.com/images/fluffy2.jpg'], hasAdoptionRequest: false, isAdopted: false, shelterRating: 4.8}}
            summary: 'Returns details of a pet given its id'
            tags:
                - Pet
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the pet'
                    in: path
                    name: petID
                    required: true
                    schema:
                        type: string
                    example: A123456789
    /application:
        post:
            operationId: ApplyForAPet
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplictionResponseForUser'
                            examples:
                                'Example 1':
                                    value: {application: {id: 64b14bd7ba2fba2af4b5338d, status: 'Under Review', submissionDate: '2020-01-20', petImage: 'https://example.com/images/fluffy1.jpg', petName: Fluffy, shelterName: 'Animal Haven Shelter', shelterID: 6475e9630044288a2b4880b5, microchipID: A123456789, residenceType: ownHouse, hasRentPetPermission: true, hasChildren: true, childrenAges: '2,6', hasOtherPets: true, otherPetsInfo: 'Cat 1, Dog 2', petAloneTime: 6, hasPlayTimeParks: true, petActivities: 'Playing fetch, walking', handlePetIssues: 'I will buy new shoes', moveWithPet: 'I will take him with me', canAffordPetsNeeds: true, canAffordPetsMedical: true, petTravelPlans: 'I will take him wherever I go', petOutlivePlans: 'My pet will inherit my property and my friend Alex will take care of him'}, canReview: true}
            summary: 'Accepts application info and creates application if all fields are valid'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ApplicationPayload'
        get:
            operationId: GetApplications
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AllApplicationsResponse'
                            examples:
                                'Example 1':
                                    value: {applications: [{id: 64b14bd7ba2fba2af4b5338d, status: 'Under Review', submissionDate: '2020-01-20', petImage: 'https://example.com/images/fluffy1.jpg', petName: Fluffy, shelterName: 'Animal Haven Shelter', shelterID: 6475e9630044288a2b4880b5, microchipID: A123456789, residenceType: ownHouse, hasRentPetPermission: true, hasChildren: true, childrenAges: '2,6', hasOtherPets: true, otherPetsInfo: 'Cat 1, Dog 2', petAloneTime: 6, hasPlayTimeParks: true, petActivities: 'Playing fetch, walking', handlePetIssues: 'I will buy new shoes', moveWithPet: 'I will take him with me', canAffordPetsNeeds: true, canAffordPetsMedical: true, petTravelPlans: 'I will take him wherever I go', petOutlivePlans: 'My pet will inherit my property and my friend Alex will take care of him', applicantName: 'John Doe', homeVisitDate: '2023-08-19T06:00:00Z', shelterVisitDate: '2023-09-02T04:00:00Z', homeVisitEmailSentDate: '2023-08-15T10:51:48.510Z', shelterVisitEmailSentDate: '2023-08-31T10:51:48.510Z'}, {id: 64b14bd7ba2fba2af4b5338e, status: Approved, submissionDate: '2020-02-25', petImage: 'https://example.com/images/buddy1.jpg', petName: Buddy, shelterName: 'Furry Friends Shelter', shelterID: 6475e9630044288a2b4880b6, microchipID: A987654321, residenceType: rentHouse, hasRentPetPermission: true, hasChildren: false, childrenAges: "", hasOtherPets: false, otherPetsInfo: "", petAloneTime: 4, hasPlayTimeParks: true, petActivities: 'Running, hiking', handlePetIssues: 'I will provide training', moveWithPet: 'I will take him with me', canAffordPetsNeeds: true, canAffordPetsMedical: true, petTravelPlans: 'I have a trusted pet sitter', petOutlivePlans: 'My sister will take care of him', applicantName: 'Jane Smith', homeVisitDate: '2023-08-19T06:00:00Z', shelterVisitDate: '2023-09-02T04:00:00Z', homeVisitEmailSentDate: '2023-08-15T10:51:48.510Z', shelterVisitEmailSentDate: '2023-08-31T10:51:48.510Z'}], totalPages: 10, applicationStatuses: ['Under Review', Approved, Rejected]}
            summary: 'Returns list of applications of a user'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: query
                    name: page
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: limit
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: searchQuery
                    required: false
                    schema:
                        type: string
                -
                    in: query
                    name: applicationStatusFilter
                    required: false
                    schema:
                        type: string
    '/application/{applicationID}':
        get:
            operationId: GetApplicationDetails
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplictionResponseForUser'
                            examples:
                                'Example 1':
                                    value: {application: {id: 64b14bd7ba2fba2af4b5338d, status: 'Under Review', submissionDate: '2020-01-20', petImage: 'https://example.com/images/fluffy1.jpg', petName: Fluffy, shelterName: 'Animal Haven Shelter', shelterID: 6475e9630044288a2b4880b5, microchipID: A123456789, residenceType: ownHouse, hasRentPetPermission: true, hasChildren: true, childrenAges: '2,6', hasOtherPets: true, otherPetsInfo: 'Cat 1, Dog 2', petAloneTime: 6, hasPlayTimeParks: true, petActivities: 'Playing fetch, walking', handlePetIssues: 'I will buy new shoes', moveWithPet: 'I will take him with me', canAffordPetsNeeds: true, canAffordPetsMedical: true, petTravelPlans: 'I will take him wherever I go', petOutlivePlans: 'My pet will inherit my property and my friend Alex will take care of him'}, canReview: true}
            summary: 'Returns an application''s details given id'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
    /application/timeSlots:
        get:
            operationId: GetTimeSlots
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TimeSlotsResponse'
                            examples:
                                'Example 1':
                                    value: {availableTimeSlots: ['9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00']}
            summary: 'Returns time slots available to shcedule visit on a particular day'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: query
                    name: shelterID
                    required: true
                    schema:
                        type: string
                -
                    in: query
                    name: petID
                    required: true
                    schema:
                        type: string
                -
                    in: query
                    name: visitDate
                    required: true
                    schema:
                        type: string
                -
                    in: query
                    name: visitType
                    required: true
                    schema:
                        type: string
    '/application/{applicationID}/homeVisit':
        post:
            operationId: ScheduleHomeVisit
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Accepts application id and date for home visit and sends email to applicant and shelter'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ScheduleVisitPayload'
    '/application/{applicationID}/shelterVisit':
        post:
            operationId: ScheduleShelterVisit
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Accepts application id and date for shelter visit and sends email to applicant and shelter'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ScheduleVisitPayload'
    '/application/{applicationID}/status':
        put:
            operationId: UpdateApplicationStatus
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Updates an application''s status'
            tags:
                - Application
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateApplicationPayload'
    '/shelter/{shelterID}':
        get:
            operationId: GetShelter
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ShelterProfileResponse'
                            examples:
                                'Example 1':
                                    value: {profilePhoto: 'https://example.com/shelterProfilePhoto.jpg', name: 'Animal Haven Shelter', email: info@animalhavenshelter.com, address: '251 Centre St, New York, NY 10013, USA', bio: 'Animal Haven is a non-profit organization that finds homes for abandoned cats and dogs throughout the Tri-State area, and provides behavior intervention when needed to improve chances of adoption. Founded in 1967, we operate an animal shelter in Manhattan. We also provide programs that enhance the bond between animals and people.', rating: 4.8, numberOfReviews: 567, canReview: true}
            summary: 'Returns a shelter''s details given id'
            tags:
                - Shelter
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the shelter'
                    in: path
                    name: shelterID
                    required: true
                    schema:
                        type: string
                    example: 6475e9630044288a2b4880b5
    /shelter:
        get:
            operationId: GetShelters
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/ShelterResponse'
                                type: array
                            examples:
                                'Example 1':
                                    value: {id: 60df5df17f4c6a01ac63491c, name: 'Furry Friends Sanctuary'}
            summary: 'Returns ids and names of all shelters'
            tags:
                - Shelter
            security:
                -
                    bearerAuth: []
            parameters: []
    '/shelter/applications/{applicationID}':
        get:
            operationId: GetApplicationDetails
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplictionResponseForShelter'
            summary: 'Returns an application''s details given id'
            tags:
                - Shelter
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
    /shelter/invitations:
        post:
            operationId: InviteShelter
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
                            examples:
                                'Example 1':
                                    value: {email: johndoe@example.com}
            summary: 'Sends invite to shelter to sign up'
            tags:
                - Shelter
            security:
                -
                    bearerAuth: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailPayload'
    /shelter/invitations/token/verification:
        get:
            operationId: VerifyInvitationToken
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerifyInvitationResponse'
                            examples:
                                'Example 1':
                                    value: {email: info@animalhavenshelter.com, role: SHELTER}
            summary: 'Verifies the invitation token for shelter'
            tags:
                - Shelter
            security: []
            parameters:
                -
                    in: query
                    name: invitationToken
                    required: true
                    schema:
                        type: string
    '/review/{shelterID}':
        post:
            operationId: AddReview
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Accepts rating and review and adds the review in the database'
            tags:
                - Review
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the shelter'
                    in: path
                    name: shelterID
                    required: true
                    schema:
                        type: string
                    example: 6475e9630044288a2b4880b5
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReviewPayload'
        get:
            operationId: GetReviews
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReviewsResponse'
                            examples:
                                'Example 1':
                                    value: {reviews: [{applicantName: 'John Doe', applicantEmail: johndoe@example.com, rating: 4, reviewText: 'Great experience overall. The staff were very friendly and the place was clean and well kept.'}, {applicantName: 'Jane Smith', applicantEmail: janesmith@example.com, rating: 5, reviewText: 'I had a wonderful experience here. The staff are very professional, caring, and compassionate. I couldn''t ask for more.'}, {applicantName: 'Mark Brown', applicantEmail: markbrown@example.com, rating: 3, reviewText: 'The place was decent, but it could use a little more organization. The staff were pleasant, but they seemed understaffed.'}], totalPages: 3}
            summary: 'Returns all reviews of a specific shelter'
            tags:
                - Review
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the shelter'
                    in: path
                    name: shelterID
                    required: true
                    schema:
                        type: string
                    example: 6475e9630044288a2b4880b5
                -
                    in: query
                    name: page
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: limit
                    required: true
                    schema:
                        format: double
                        type: number
        put:
            operationId: UpdateReview
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Updates review'
            tags:
                - Review
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the shelter'
                    in: path
                    name: shelterID
                    required: true
                    schema:
                        type: string
                    example: 6475e9630044288a2b4880b5
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReviewPayload'
    '/reactivationRequest/{applicationID}':
        post:
            operationId: RequestReactivation
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Accepts reactivation request and sends email to shelter'
            tags:
                - ReactivationRequest
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReactivationRequestPayload'
        get:
            operationId: GetReactivationRequest
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReactivationRequestPayload'
                            examples:
                                'Example 1':
                                    value: {reasonNotScheduled: 'I had an unexpected personal commitment that consumed my attention during that time, and I missed the scheduling window.', reasonToReactivate: 'The commitment has been addressed, and I am now fully available to proceed with the visit scheduling.'}
            summary: 'Returns the reactivation request associated with given application ID'
            tags:
                - ReactivationRequest
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the application'
                    in: path
                    name: applicationID
                    required: true
                    schema:
                        type: string
                    example: 64b14bd7ba2fba2af4b5338d
    /notification:
        get:
            operationId: GetallNotifications
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AllNotificationsResponse'
                            examples:
                                'Example 1':
                                    value: {notifications: [{id: 6523fdbb5f59f9eb98f3163b, userEmail: johndoe@example.com, applicationID: 6523d393da718fbc64f5b628, status: 'Home Visit Requested', petImage: 'https://example.com/images/fluffy1.jpg', isSeen: true, isRead: false, actionUrl: /view/application/6523d393da718fbc64f5b628, date: '2023-10-09T13:18:51Z'}, {id: 6524006181eca8f269f376d9, userEmail: johndoe@example.com, applicationID: 6523d393da718fbc64f5b628, status: 'User Visit Scheduled', petImage: 'https://example.com/images/fluffy1.jpg', isSeen: true, isRead: false, actionUrl: /view/application/6523d393da718fbc64f5b628, date: '2023-10-16T13:18:51Z'}, {id: 6523f799f05d4012e0ab578c, userEmail: johndoe@example.com, applicationID: 6523d393da718fbc64f5b628, status: Approved, petImage: 'https://example.com/images/fluffy1.jpg', isSeen: true, isRead: true, actionUrl: /view/application/6523d393da718fbc64f5b628, date: '2023-10-24T13:18:51Z'}], totalPages: 3}
            summary: 'Returns all notifications of the user'
            tags:
                - Notification
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    in: query
                    name: page
                    required: true
                    schema:
                        format: double
                        type: number
                -
                    in: query
                    name: limit
                    required: true
                    schema:
                        format: double
                        type: number
    '/notification/{notificationID}/read':
        put:
            operationId: MarkAsRead
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    message: {type: string}
                                    code: {type: number, format: double}
                                required:
                                    - message
                                    - code
                                type: object
            summary: 'Accepts notification ID and marks it as read'
            tags:
                - Notification
            security:
                -
                    bearerAuth: []
            parameters:
                -
                    description: 'ID of the notification'
                    in: path
                    name: notificationID
                    required: true
                    schema:
                        type: string
servers:
    -
        url: /
tags:
    -
        name: Auth
        description: 'Operations about auth'
    -
        name: Session
        description: 'Get Session information'
    -
        name: Pet
        description: 'Operations about pet'
    -
        name: Application
        description: 'Operations about pet adoption application'
