import { Pet, generatePets, petData, removeAllPets } from './utils/generatePet'
import { app } from '../app'
import { Admin, generateAdminandTokens } from './utils/generateUserAndToken'
import { dropCollections, dropDatabase, mongooseSetUp } from './utils/setup'
import request from 'supertest'
import { generateShelters, removeAllShelters } from './utils/generateShelters'
import tmp from 'tmp-promise'
import multer from 'multer'
import { PetController } from '../controllers/pet'
import { authenticateAccessToken } from '../middleware/authenticateToken'
import express from 'express'
import { Pet as PetModel } from '../models/Pet'
import { isShelter } from '../middleware/isShelter'
import { Role, User } from '../models/User'
import { generateAccessToken } from '../utils/generateAccessToken'

describe('pet', () => {
  beforeAll(async () => {
    await mongooseSetUp()
  })

  afterEach(async () => {
    await dropCollections()
  })

  afterAll(async () => {
    await dropDatabase()
  })

  describe('add a pet', () => {
    let user: Admin
    let pet: Pet

    const testsToExclude = [
      'should throw an error if no image file is provided'
    ]

    const userCheck = [
      'pet add a pet should throw an error if a user(Role: USER) tries to add a pet'
    ]

    beforeEach(async () => {
      let currentTestName = expect.getState().currentTestName
      if (!userCheck.includes(currentTestName || ''))
        user = await generateAdminandTokens(Role.Shelter)

      await generateShelters()

      const shelters = await User.find({ role: 'SHELTER' })
      pet = petData
      pet.shelterID = shelters[0]._id

      // Check if the current test should run the mockFileUpload or not
      currentTestName = expect.getState().currentTestName
      if (!testsToExclude.includes(currentTestName || '')) {
        await mockFileUpload()
      }
    })
    afterEach(async () => {
      await removeAllPets()
      await removeAllShelters()
    })

    // Mock the Google Drive upload functionality
    jest.mock('googleapis', () => {
      const mockDriveFilesCreate = jest
        .fn()
        .mockImplementation((_params, callback) => {
          // Simulate a successful upload by invoking the callback with a mock response
          callback(null, { data: { id: 'mockFileId' } })
        })

      const mockDrive = {
        files: {
          create: mockDriveFilesCreate
        }
      }
      const mockUploadFiles = jest.fn().mockResolvedValue(['mockFileId'])

      return {
        drive: jest.fn(() => mockDrive),
        uploadFiles: mockUploadFiles
      }
    })

    let tmpFilePath, tmpFilePath2, tmpFilePath3, cleanup, cleanup2, cleanup3
    const server = express()

    const mockFileUpload = async () => {
      const result1 = await tmp.file({ postfix: '.jpg' })
      tmpFilePath = result1.path
      cleanup = result1.cleanup

      const result2 = await tmp.file({ postfix: '.jpg' })
      tmpFilePath2 = result2.path
      cleanup2 = result2.cleanup

      const result3 = await tmp.file({ postfix: '.jpg' })
      tmpFilePath3 = result3.path
      cleanup3 = result3.cleanup

      const upload = multer({ storage: multer.memoryStorage() }) // Use multer's memory storage
      const controller = new PetController()

      server.post(
        '/pet/',
        authenticateAccessToken,
        isShelter,
        upload.array('images', 10),
        async (req, res) => {
          try {
            // Handle the request here
            const {
              microchipID,
              name,
              gender,
              birthDate,
              color,
              breed,
              category,
              activityNeeds,
              levelOfGrooming,
              isHouseTrained,
              healthCheck,
              allergiesTreated,
              wormed,
              heartwormTreated,
              vaccinated,
              deSexed,
              bio,
              traits,
              adoptionFee,
              shelterID
            } = req.body
            if (req.file) {
              if (!req.file.mimetype.startsWith('image/')) {
                return res.status(400).send('Only image files are allowed')
              }
            }

            const profilePhotoIds = [
              'mockFileId1',
              'mockFileId2',
              'mockFileId3'
            ]

            const response = await controller.addPet(
              microchipID,
              name,
              gender,
              birthDate,
              color,
              breed,
              category,
              activityNeeds,
              levelOfGrooming,
              isHouseTrained,
              healthCheck,
              allergiesTreated,
              wormed,
              heartwormTreated,
              vaccinated,
              deSexed,
              bio,
              traits,
              adoptionFee,
              profilePhotoIds,
              req,
              shelterID
            )
            // Send the response
            return res.send(response)
          } catch (err: any) {
            return res.status(err.code).send(err.message)
          }
        }
      )
    }

    it('should successfully add a pet with all fields provided', async () => {
      const response = await request(server)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(200)

      expect(response.body.pet).not.toBeNull()

      await cleanup() // Delete the temporary file after the test
      await cleanup2()
      await cleanup3()
    })

    it('should throw an error if user does not exist', async () => {
      const nonExistentEmailToken = generateAccessToken(
        'nonexistent@gmail.com',
        'USER'
      )

      const response = await request(app)
        .post('/pet/')
        .auth(nonExistentEmailToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(404)

      expect(response.text).toEqual('User not found')
      expect(response.body).toEqual({})
    })

    it('should throw an error if no token is provided', async () => {
      const response = await request(app)
        .post('/pet/')
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(401)

      expect(response.text).toEqual('Unauthorized')
      expect(response.body).toEqual({})
    })

    it('should throw an error if a user(Role: USER) tries to add a pet', async () => {
      user = await generateAdminandTokens(Role.User)
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(403)

      expect(response.text).toEqual('Permission denied')
      expect(response.body).toEqual({})
    })

    it('should not add a pet if it already exists', async () => {
      await generatePets()
      const pets = await PetModel.find({})
      pet.microchipID = pets[0].microchipID

      const response = await request(server)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual('Pet already exists')
      expect(response.body).toEqual({})

      await removeAllPets()
    })

    it('should throw an error if no image file is provided', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .expect(400)

      expect(response.text).toEqual('No image file provided.')
      expect(response.body).toEqual({})
    })

    it('should throw an error if microchip ID is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"microchipID" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if name is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"name" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if gender is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"gender" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if birthDate is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"birthDate" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if color is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"color" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if breed is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"breed" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if category is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"category" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if activityNeeds is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"activityNeeds" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if levelOfGrooming is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"levelOfGrooming" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if isHouseTrained is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"isHouseTrained" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if healthCheck is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"healthCheck" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if allergiesTreated is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"allergiesTreated" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if wormed is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"wormed" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if heartwormTreated is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"heartwormTreated" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if vaccinated is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"vaccinated" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if deSexed is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"deSexed" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if bio is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"bio" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if traits is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"traits" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if adoptionFee is missing', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"adoptionFee" is required`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if microchip ID is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', '')
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"microchipID" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if name is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', '')
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"name" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if gender is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', '')
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"gender" must be one of [MALE, FEMALE]`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if birthDate is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', '')
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"birthDate" must be a valid date`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if color is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', '')
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"color" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if breed is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', '')
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"breed" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if category is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', '')
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"category" must be one of [CAT, DOG, HORSE, RABBIT, BIRD, SMALL_AND_FURRY, SCALES_FINS_AND_OTHERS, BARNYARD]`
      )
      expect(response.body).toEqual({})
    })

    it('should throw an error if activityNeeds is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', '')
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"activityNeeds" must be one of [LOW, VERY_LOW, MIDRANGE, HIGH, VERY_HIGH]`
      )
      expect(response.body).toEqual({})
    })

    it('should throw an error if levelOfGrooming is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', '')
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"levelOfGrooming" must be one of [LOW, MEDIUM, HIGH]`
      )
      expect(response.body).toEqual({})
    })

    it('should throw an error if isHouseTrained is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', '')
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"isHouseTrained" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if healthCheck is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', '')
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"healthCheck" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if allergiesTreated is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', '')
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"allergiesTreated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if wormed is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', '')
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"wormed" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if heartwormTreated is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', '')
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"heartwormTreated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if vaccinated is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', '')
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"vaccinated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if deSexed is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', '')
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"deSexed" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if bio is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', '')
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"bio" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if traits is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', '')
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"traits" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should throw an error if adoptionFee is emppty', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', '')
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"adoptionFee" is not allowed to be empty`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if gender is invalid enum type', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', 'Male') // should be MALE
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"gender" must be one of [MALE, FEMALE]`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if category is invalid enum type', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', 'Cat') // should be CAT
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"category" must be one of [CAT, DOG, HORSE, RABBIT, BIRD, SMALL_AND_FURRY, SCALES_FINS_AND_OTHERS, BARNYARD]`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if activityNeeds is invalid enum type', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', 'Low') // should be LOW
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"activityNeeds" must be one of [LOW, VERY_LOW, MIDRANGE, HIGH, VERY_HIGH]`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if levelOfGrooming is invalid enum type', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', 'Medium') // should be MEDIUM
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"levelOfGrooming" must be one of [LOW, MEDIUM, HIGH]`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if isHouseTrained is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', 1)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"isHouseTrained" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if healthCheck is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', 1)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"healthCheck" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if allergiesTreated is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', 1)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"allergiesTreated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if wormed is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', 1)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"wormed" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if heartwormTreated is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', 1)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"heartwormTreated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if vaccinated is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', 1)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"vaccinated" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if deSexed is number', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', 1)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"deSexed" must be a boolean`)
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if microchipID has length less than 10', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', '123456')
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"microchipID" length must be 10 characters long`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if name has length less than 3', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', 'Ar')
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"name" length must be at least 3 characters long`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if name has length greater than 32', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', 'Abcdefghijklmnopqrstuvwxyzabcdefghi')
        .field('gender', pet.gender)
        .field('birthDate', pet.birthDate)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(
        `"name" length must be less than or equal to 32 characters long`
      )
      expect(response.body).toEqual({})
    })

    it('should respond with Bad Request if birthdate is in future', async () => {
      const response = await request(app)
        .post('/pet/')
        .auth(user.tokens.accessToken, { type: 'bearer' })
        .field('microchipID', pet.microchipID)
        .field('name', pet.name)
        .field('gender', pet.gender)
        .field('birthDate', Date.now() + 60 * 1000)
        .field('color', pet.color)
        .field('breed', pet.breed)
        .field('category', pet.category)
        .field('activityNeeds', pet.activityNeeds)
        .field('levelOfGrooming', pet.levelOfGrooming)
        .field('isHouseTrained', pet.isHouseTrained)
        .field('healthCheck', pet.healthCheck)
        .field('allergiesTreated', pet.allergiesTreated)
        .field('wormed', pet.wormed)
        .field('heartwormTreated', pet.heartwormTreated)
        .field('vaccinated', pet.vaccinated)
        .field('deSexed', pet.deSexed)
        .field('bio', pet.bio)
        .field('traits', pet.traits)
        .field('adoptionFee', pet.adoptionFee)
        .attach('images', tmpFilePath)
        .attach('images', tmpFilePath2)
        .attach('images', tmpFilePath3)
        .expect(400)

      expect(response.text).toEqual(`"birthDate" must be less than "now"`)
      expect(response.body).toEqual({})
    })
  })
})
